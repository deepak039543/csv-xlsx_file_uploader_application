<!DOCTYPE html>
<html lang="en">

    <head>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>Document</title>
        <style>
        body {

            background-color: rgb(135, 105, 226);

        }

        table {
            border-collapse: collapse;
            width: 80%;
            margin: auto;
        }

        th,
        td {
            border: 1px solid black;
            padding: 8px;
            text-align: center;
        }

        th {
            background-color: #f2f2f2;
        }

        .oops {
            background-color: #f2f2f2;
        }

        .pagination {
            display: flex;
            justify-content: center;
            margin-top: 20px;
        }

        /* Pagination link style */
        .page-link {
            padding: 5px 10px;
            margin: 0 5px;
            text-decoration: none;
            background-color: #007bff;
            color: #fff;
            border-radius: 5px;
            cursor: pointer;
        }

        /* Style for disabled previous and next links */
        .page-link[disabled] {
            background-color: #ccc;
            cursor: not-allowed;
        }

        /* Style for the "Edit Role" button */
        .edit-role-button {
            background-color: #007bff;
            /* Blue background color */
            color: white;
            /* Text color */
            border: none;
            /* Remove button border */
            padding: 5px 10px;
            /* Add some padding to the button */
            cursor: pointer;
            /* Display a pointer cursor on hover */
            border-radius: 5px;
            /* Rounded corners */
        }

        /* Style for the "Edit Role" button on hover */
        .edit-role-button:hover {
            background-color: #0056b3;
            /* Darker blue on hover */
        }

        /* Style for the Edit Role link */
        td a {
            display: inline-block;
            padding: 5px 10px;
            background-color: #007bff;
            /* Blue background color */
            color: white;
            /* Text color */
            text-decoration: none;
            /* Remove underline */
            border-radius: 5px;
            /* Rounded corners */
            transition: background-color 0.3s ease;
            /* Smooth transition */
        }

        /* Style for the Edit Role link on hover */
        td a:hover {
            background-color: #0056b3;
            /* Darker blue on hover */
        }

        /* Style for the modal container */
        .modal {
            display: none;
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(0, 0, 0, 0.7);
            z-index: 1000;
            overflow: auto;
        }

        /* Style for the modal content */
        .modal-content {
            background-color: #fff;
            margin: 15% auto;
            padding: 20px;
            border-radius: 5px;
            box-shadow: 0px 0px 10px rgba(0, 0, 0, 0.3);
            width: 80%;
            max-width: 400px;
            position: relative;
        }

        /* Style for the close button */
        .close {
            position: absolute;
            top: 10px;
            right: 10px;
            font-size: 24px;
            cursor: pointer;
            color: #888;
        }

        /* Style for the modal title */
        h2 {
            font-size: 24px;
            margin-bottom: 20px;
            color: #333;
        }

        /* Style for form labels */
        label {
            display: block;
            margin-bottom: 10px;
            font-weight: bold;
            color: #555;
        }

        /* Style for input fields */
        input[type="text"] {
            width: 100%;
            padding: 10px;
            margin-bottom: 15px;
            border: 1px solid #ccc;
            border-radius: 3px;
        }

        /* Style for buttons */
        button[type="submit"],
        button[type="button"] {
            padding: 10px 20px;
            background-color: #007bff;
            color: #fff;
            border: none;
            border-radius: 3px;
            cursor: pointer;
            font-size: 16px;
        }

        button[type="submit"]:hover,
        button[type="button"]:hover {
            background-color: #0056b3;
        }

        /* Additional styles can be added as needed */

        /* Style for overlaying backdrop */
        .modal:target {
            display: flex;
            justify-content: center;
            align-items: center;
        }

        /* Responsive styles */
        @media screen and (max-width: 600px) {
            .modal-content {
                width: 95%;
            }
        }


        .addUser a {
            text-decoration: none;
            /* Remove underline */
            color: #007bff;
            /* Set the link color to blue (you can use any color you prefer) */
            font-weight: bold;
            /* Make the text bold */
        }

        .addUser a:hover {
            color: #0056b3;
            /* Change link color on hover */
        }

        .select-column {
            display: table-cell;
        }

        .initially-hidden {
            display: none;
        }
    </style>
        <link rel="stylesheet"
            href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.2/css/all.min.css"
            integrity="sha512-z3gLpd7yknf1YoNbCzqRKc4qyor8gaKU1qmn+CShxbuBusANI9QpRohGBreCFkKxLhei6S9CQXFEbbKuqLg0DA=="
            crossorigin="anonymous" referrerpolicy="no-referrer" />
        <link
            href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css"
            rel="stylesheet"
            integrity="sha384-T3c6CoIi6uLrA9TneNEoa7RxnatzjcDSCmG1MXxSR1GAsXEV/Dwwykc2MPK8M2HN"
            crossorigin="anonymous">
    </head>

    <body>
        {{!-- here is the navbar --}}
        <div style="background-color :#6317a9; height:100vh;">
            <nav style="background-color :#4e0f89;"
                class="navbar navbar-expand-lg  ">
                <div>
                    <form id="searchForm" role="search" action="/search"
                        method="GET">
                        <input style="padding:6px;" type="search"
                            id="searchInput" name="q" placeholder="Search...."
                            aria-label="Search">

                        <button style="background-color :black;" type="submit">Search</button>
                    </form>
                </div>
            </nav>
            <form action="/viewData" id="magic"></form>

            {{!-- CSV & XLSX file data show in this table form --}}
            <div>
                <div>
                    <table
                        class="table table-striped table-bordered table-hover table-dark w-75 my-3"
                        id="viewDataPage">
                        <thead>
                            <tr>
                                <th class="initially-hidden">Select</th>
                                <th>name
                                    <a href="/viewData?sort=username"
                                        class="sort-link">&#9650;</a>
                                    <a href="/viewData?sort=-username"
                                        class="sort-link">&#9660;</a>
                                </th>
                                <th>mobile</th>
                                <th>categories</th>
                                <th>Action</th>
                            </tr>
                        </thead>
                        <tbody>
                            <!-- Loop through the 'users' array and display all csv data -->
                            {{#each users}}
                            <tr>
                                {{!-- open checkbox if admin wants to perform
                                bulk editing action on selected user --}}
                                <td class="initially-hidden"><input
                                        type="checkbox" class="user-checkbox"
                                        name="selectedUsers"
                                        value="{{ this._id }}"></td>

                                <td class="oops">{{ this.name }}</td>
                                <td>{{ this.mobile }}</td>
                                <td>{{ this.categories }}</td>
                                <td><!-- Edit Icon  -->
                                    <a style="background-color:#4e0f89;"
                                        href="/editRole?userId={{ this.userID}}"
                                        class="edit-icon">

                                        <i class="fas fa-edit"></i>
                                    </a>
                                </td>

                            </tr>
                            {{/each}}

                        </tbody>
                    </table>
                    <div class="pagination">
                        {{#if hasPrevPage}}
                        <a style=" color:#4e0f89; background-color :black;"
                            href="/viewData?page={{prevPage}}&sort={{sort}}"
                            class="page-link">Previous</a>
                        {{/if}}

                        {{#if hasNextPage}}
                        <a style=" color:#4e0f89; background-color :black;"
                            href="/viewData?page={{nextPage}}&sort={{sort}}"
                            class="page-link">Next</a>
                        {{/if}}
                    </div>
                </div>
            </div>

            <div class="d-flex justify-content-xl-between">
                <button style=" color :white; background-color :black; "
                    class="initially-hidden" id="selectAllButton"
                    style="display: none;" onclick="selectAll()">Select
                    all</button>
                <button style="color :white; background-color :black;"
                    id="selectButton"
                    onclick="toggleSelectColumn()">Select</button>
                <button style=" color :white; background-color :black;"
                    class="btn " id="editButton">Category</button>
            </div>

            {{!-- here is the form for bulk editing when admin click to category
            button after selecting users --}}
            <form action="/bulk-edit" method="POST" id="bulkEditForm"
                style="display: none;">
                <input type="text" id="newCategoryInput" name="newCategory"
                    placeholder="New Category">
                <input type="hidden" id="selectedUsersInput"
                    name="selectedUsers" value>

                <button style=" color :white; background-color :black;"
                    class="btn " type="submit" id="saveButton">Save
                    newCategory</button>
            </form>

            {{!-- intigrate the popup model for editing the name and mobile
            num when admin click to edit icon this popup model will opena with
            existing users data--}}
            <div id="editModal" class="modal">
                <div class="modal-content">
                    <span class="close">&times;</span>

                    <h2>Edit User Name and Mobile</h2>
                    <form id="roleEditForm">

                        <label for="newRole">Edit Name :</label>
                        <input type="text" id="newName" name="newName" required>
                        <label for="newRole">Edit Mobile :</label>
                        <input type="text" id="newMobile" name="newMobile"
                            required>

                        <button style=" color :white; background-color :black;"
                            class="btn btn-success"
                            type="submit">Save</button>
                        <button style=" color :white; background-color :black;"
                            class="btn " type="button"
                            id="cancelButton">Cancel</button>

                    </form>
                </div>
            </div>
        </div>

        <script
            src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/js/bootstrap.bundle.min.js"
            integrity="sha384-C6RzsynM9kWDrMNeT87bh95OGNyZPhcTNXj1NW7RuBCsyN/o0jlpcV8Qyq46cDfL"
            crossorigin="anonymous"></script>
    </body>

    <script>

    //if admin click to search button then all csv data filter according to admin search bar input
    document.addEventListener("DOMContentLoaded", function () {
        const searchForm = document.getElementById("searchForm");
        const searchInput = document.getElementById("searchInput");
        const viewDataPage = document.getElementById("viewDataPage").getElementsByTagName("tbody")[0];

        searchForm.addEventListener("submit", function (event) {
            event.preventDefault();
            const searchQuery = searchInput.value.trim().toLowerCase();
            if (searchQuery === "") {
                // If search query is empty, show all rows
                const rows = viewDataPage.getElementsByTagName("tr");
                for (let i = 0; i < rows.length; i++) {
                    rows[i].style.display = ""; // Show the row
                }
            } else {

                const rows = viewDataPage.getElementsByTagName("tr");
                for (let i = 0; i < rows.length; i++) {
                    const row = rows[i];
                    const rowText = row.textContent.toLowerCase();


                    if (rowText.includes(searchQuery)) {
                        row.style.display = ""; // Show the row
                    } else {
                        row.style.display = "none"; // Hide the row if it doesn't match the search query
                    }
                }
            }

        });
    });

    let isInitiallyHidden = true; // A flag to track the current state of select and selectall button

    // Function to toggle the visibility of checkboxes
    function toggleSelectColumn() {
        const initiallyHiddenRows = document.querySelectorAll('.initially-hidden');

        initiallyHiddenRows.forEach(row => {
            row.style.display = isInitiallyHidden ? 'table-cell' : 'none';
        });

        isInitiallyHidden = !isInitiallyHidden; // Toggle the flag for the next click
    }
    //function to select all the checkbox when admin click to selectAll button
    function selectAll() {
        const checkboxes = document.querySelectorAll('.user-checkbox');

        checkboxes.forEach(checkbox => {
            checkbox.checked = !isInitiallyHidden;
        });

        isInitiallyHidden = !isInitiallyHidden; // Toggle the flag for the next click
    }




    // Function to collect selected users' data when the "Category" button is clicked
    function getSelectedUsersData() {
        console.log("new world");
        const selectedUsers = [];
        const checkboxes = document.querySelectorAll('.user-checkbox:checked');

        checkboxes.forEach(checkbox => {
            const row = checkbox.closest('tr');
            const userData = {
                name: row.querySelector('.oops').textContent,
                mobile: row.querySelector('td:nth-child(3)').textContent,
                categories: row.querySelector('td:nth-child(4)').textContent
            };
            selectedUsers.push(userData);
        });

        return selectedUsers;
    }
    //function for toggle the bulk editing form when admin click to "Category" button
    function toggleBulkEditForm() {
        const bulkEditForm = document.getElementById('bulkEditForm');
        bulkEditForm.style.display = bulkEditForm.style.display === 'none' ? 'block' : 'none';
    }

    // Function to send selected user data and enter newCategory to the server for bulk editing
    function submitBulkEditForm() {
        console.log("welcome");
        const newCategory = document.getElementById('newCategoryInput').value; // Get the new category value
        const selectedUsers = getSelectedUsersData();
        // Check if selectedUsersData is an array before proceeding
        if (!Array.isArray(selectedUsers)) {
            console.error('Selected users data is not an array.');
            return;
        }

        // Send the selectedUsersData and newCategory to the server for bulk editing using fetch or AJAX
        fetch('/bulk-edit', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({ selectedUsers, newCategory }) // Send the data as JSON
        })
            .then(response => {
                // Handle the response from the server
                if (response.ok) {

                    console.log('Bulk edit successful');

                } else {
                    // Handle errors
                    console.error('Bulk edit failed');
                }
            })
            .catch(error => {
                console.error('Error sending data:', error);
            });
    }
    // Add an event listener to the "Category" button to collect and send selected user data
    const editButton = document.getElementById('editButton');
    editButton.addEventListener('click', function () {
        toggleBulkEditForm();
        const selectedUser = getSelectedUsersData(); // Call getSelectedUsersData() here

    });
    // Add an event listener to the "Save" button to submit the bulk editing form
    const saveButton = document.getElementById('saveButton');
    saveButton.addEventListener('click', submitBulkEditForm);

    // Handle edit icon click for editing individual user name and mobile
    var editIcons = document.querySelectorAll('.edit-icon');
    var modal = document.getElementById('editModal');
    var roleEditForm = document.getElementById('roleEditForm');
    var newNameInput = document.getElementById('newName');
    var newMobileInput = document.getElementById('newMobile');

    editIcons.forEach(function (editIcon) {
        editIcon.addEventListener('click', function (event) {
            event.preventDefault();
            var userId = this.getAttribute('href').split('=')[1];
            console.log(userId);
            // Show the modal
            modal.style.display = 'block';

            // Fetch the current user role via AJAX
            var xhr = new XMLHttpRequest();
            xhr.open('GET', `/getUserRole/${userId}`, true);
            xhr.onreadystatechange = function () {
                if (xhr.readyState === 4 && xhr.status === 200) {
                    var data = JSON.parse(xhr.responseText);
                    var currentName = data.name;
                    var currentMobile = data.mobile;
                    newNameInput.value = currentName;
                    newMobileInput.value = currentMobile;
                } else if (xhr.readyState === 4 && xhr.status !== 200) {
                    console.error('Error fetching user name and mobile', xhr.status, xhr.statusText);
                }
            };
            xhr.send(null);

            // Handle the form submission
            roleEditForm.addEventListener('submit', function (e) {

                e.preventDefault();
                var newname = newNameInput.value;
                console.log(newname);
                var newmobile = newMobileInput.value;
                console.log(newmobile);
                // Send an AJAX request to update the user's role
                var xhr2 = new XMLHttpRequest();

                xhr2.open('POST', `/updateRole/${userId}`, true);
                console.log('User role updated successfully');
                xhr2.setRequestHeader('Content-Type', 'application/json;charset=UTF-8');
                xhr2.onreadystatechange = function () {
                    if (xhr2.readyState === 4 && xhr2.status === 200) {
                        modal.style.display = 'none';
                        var editIconSelector = `.edit-icon[href="/editRole?userId=${userId}"]`;
                        var editIcon = document.querySelector(editIconSelector);

                        if (editIcon) {
                            var row = editIcon.closest('tr');

                            if (row) {
                                var nameCell = row.querySelector('td:nth-child(2)');
                                var mobileCell = row.querySelector('td:nth-child(3)');

                                if (nameCell && mobileCell) {
                                    nameCell.textContent = newname;
                                    mobileCell.textContent = newmobile;
                                } else {
                                    console.error('Name and/or mobile cell not found');
                                }
                            } else {
                                console.error(`Row not found for userID: ${userId}`);
                            }
                        } else {
                            console.error(`Edit icon not found for userID: ${userId}`);
                        }




                    } else if (xhr2.readyState === 4 && xhr2.status !== 200) {
                        // Handle error response
                        console.error('Error updating user role', xhr2.status, xhr2.statusText);
                    }
                };

                xhr2.send(JSON.stringify({ newname: newname, newmobile: newmobile }));
                console.log("update successfully!")
            });
        });
    });

    // Handle modal close when "Cancel" button is clicked
    var cancelButton = document.getElementById('cancelButton');
    cancelButton.addEventListener('click', function () {
        modal.style.display = 'none';
    });

    // Handle modal close when clicking outside the modal
    window.onclick = function (event) {
        if (event.target === modal) {
            modal.style.display = 'none';
        }
    };

</script>

</html>